# -*- coding: utf-8 -*-
"""Strings.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ub5Ylm9PwmrsEMpXWlveIPB6kaMihL1H

# **Introduction to Strings**

Strings are immutable, so they cannot be modified once created.
"""

text = "Hello"
# Trying to change first character
text[0] = "J"

text = "Hello"
text = "J" + text[1:]
print(text)

"""**Accessing Characters**"""

text = "Python"

print(text[0])   # First character (P)
print(text[3])   # Fourth character (h)
print(text[-1])

"""**Defining Strings :**

String is a sequence of characters enclosed within single quotes(' '), double quotes(" "), or Triple quotes(''' ''' or ''' ''')
"""

str1 = 'Hello'  # Single quotes
str2 = "world"  # Double quotes
str3 = '''This is a multi-line
string example.'''   # Triple quotes (used for multi-line text)

print(str1)
print(str2)
print(str3)

"""# Operations on Strings

1) Concatenation (+)

2) Repetition (*)

3) Indexing

4) Slicing

5) Membership (in, not in)

**1) Concatenation ( + ):**

Joining two or more strings together using the + operator
"""

first_name = "Vaishnavi"
last_name = "Thandu"

# Concatenation
full_name = first_name + " " + last_name

print("First Name:", first_name)
print("Last Name:", last_name)
print("Full Name:", full_name)

print("Hello" + " " + "World")

name = "Oliver"
age = 21

print(" My name is " + name + " and I am " + str(age) + " years old. ")

print(f' My name is {name} and I am {age} years old.')

"""**2) Repetative ( * ) :**

The ' * ' operator repeats a string multiple times.
"""

word = "Hello "
print(word * 3)

text = "Python"  # repetition without Space
print(text*5)

line = "-" * 30  # Divider Line
print(line)
print("Welcome to Python Programming")
print(line)

for i in range(1, 6):   # Loop from 1 to 5
    print("*" * i)

for i in range(5, 0, -1):   # Loop from 5 down to 1
    print(str(i) * i)

"""**3) Indexing :**

Accessing individual characters of a string using their position number (index).
"""

'''
 0  1  2  3  4  5
 P  Y  T  H  O  N
-6 -5 -4 -3 -2 -1

'''
# Positive Indexing
s = "Python"
print(s[0])
print(s[1])
print(s[5])

# Negative Indexing
print(s[-1])
print(s[-2])
print(s[-6])

"""**4) Slicing :**

Extracting a portion (substring) from a string using,

string [start : end] / [start : end +1 : step]
"""

'''
 0   1   2  3  4  5  6  7  8  9  10
 P   r   o  g  r  a  m  m  i  n  g
-11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1

'''

text = "Programming"

print(text[0:6])
print(text[3:7])

'''
 0   1   2   3   4   5   6  7  8  9 10 11 12 13 14
 V   a   i   s   h   n   a  v  i  T  h  a  n  d  u
-15 -14 -13 -12 -11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1

'''

name = "VaishnaviThandu"
print(name[:9])  # default start is 0
print(name[9:])  # from index 9 to end
print(name[3:9])
print(name[3:9:2])

# Negative Slicing

name = "VaishnaviThandu"
print(name[-6: ])
print(name[-15:-6])
print(name[:-3])

name = "Programming"
print(name[ : :-1])  # Reverse the string
print(name[: : 3])   # Every 3rd character

print(name[:12:2])  # get Even Positions
print(name[1:12:2]) # get Odd Positions

"""**5) Membership**

We have two membership operators:

in ‚Üí checks if a substring exists in the string.

not in ‚Üí checks if a substring does NOT exist in the string.

"""

word = "Education"

print("cat" in word)
print("Edu" in word)
print("abc" in word)

print("xyz" not in word)
print("tion" not in word)

s = "Python Programming"

print("Python" in s)  # True
print("python" in s)  # False (case-sensitive)

password = "python123"

if "@" in password or "#" in password or "$" in password:
    print("Password is strong (contains special character).")
else:
    print("Password is weak (add @, #, or $).")

"""# Built-in String Functions
1) len ( ) : Returns the length / no.of characters in the string (including apaces,numbers, and symbols) .

2) max ( ) / min ( ) : Returns the maximum or minimum character(based on ASCII values).

3) sorted ( ) : Returns a sorted list of characters.

4) chr ( ) / ord ( ) : converts between characters and their ASCII codes.
"""

# Len():

sentence = "Python is Fun"
print(len(sentence))

text = "Hello123!@"
print(len(text))

msg = "Hiiiiiiiiiiiiiiiiiiii"
print("Messagr length: ",len(msg))

stomach = ""
print("Food in stomach: ",len(stomach))

# max()/min():

name = "vaishnavi"
print("Maximum character:", max(name))
print("Minimum character:", min(name))

marks = [45, 68, 85, 23, 89, 36]
print("Highest Marks:", max(marks))
print("Lowest Marks:", min(marks))

# sorted():

name = "Sebastian"
print("Original:", name)
print("Sorted:", sorted(name))

word = "banana"
print("Sorted word:",sorted(word))

name = "python"
print("Ascending:",sorted(name))
print("Decending:",sorted(name, reverse= True))  # by adding 'reverse=True',it arranges things from Z to A

# chr() and ord():

print(ord('A'))  # ASCII value of 'A' is 65
print(ord('a'))  # ASCII value of 'a' is 97
print(ord('üòÄ'))

print(chr(65))
print(chr(97))
print(chr(128512))

name = "Oliver"

print(ord('O'))
print(ord('e'))
print(chr(114))
print(chr(105))

"""# String Methods:

1) Case Conversion Methods

2) Alignment & Formating Methods

3) Search & Find Methods

4) String Testing Methods(Boolean Results)

**1) Case Conversion Method**

1. upper ( ) : Converts all characters to uppercase.

2. lower ( ) : Converts all characters to lowercase.

3. capitalize ( ) : Capitalizes the first character.

4. title ( ) : Capitalizes the first letter of each word.

5. swapcase ( ) : Swaps case: upper ‚Üí lower, lower ‚Üí upper.

6. casefold ( ) : Converts to lowercase ( more aggressive than lower ( ) ).
"""

name = "vaishnavi"
print(name.upper())

# lower()

city = "HYDERABAD"
print(city.lower())

# capitalize()

msg = "hello world, welcome to python"
print(msg.capitalize())

# title()

sentence = "friday evenings are for popcorn and movies"
print(sentence.title())

# swapcase()

word = "NeVeR sToP LeArNiNg"
print(word.swapcase())

# casefold()

'''
.lower() ‚Üí normal lowercase.
.casefold() ‚Üí super lowercase (handles more cases, good for comparisons).

'''
word = "PyThOn Is AwEsOmE"  # It converts the string to lower case
print(word.casefold())

word = "Stra√üe"
print(word.casefold())

word1 = "√ü"     # German sharp S
word2 = "ss"
print(word1.casefold() == word2)

word = "ƒ∞stanbul"  # Turkish i(Dotted I)
print(word.casefold())

word = "‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç"    # Tamil
print(word.casefold())

text = "i LoVe PyThOn"

print(text.upper())      # I LOVE PYTHON
print(text.lower())      # i love python
print(text.capitalize()) # I love python
print(text.title())      # I Love Python
print(text.swapcase())   # I lOvE pYtHoN
print(text.casefold())   # i love python

"""**2) Alignment & Formatting Methods**

1. center ( width, fillchar ): Places the text in the center of a given width.

2. ljust ( width, fillchar ) : Aligns text to the left, padding the rest.

3. rjust ( width, fillchar ) : Aligns text to the right, padding the rest.

4. zfill ( width ) : Pads with zeros on the left until string reaches width.

5. format ( ) : Used to format strings with placeholders {}.

6. format_map ( mapping ) : Similar to format(), but takes a dictionary (or mapping object) directly.
"""

# center(width, fillchar)

word = "Python"
print(word.center(20, "-"))

# ljust(width, fillchar)

word = "Left"
print(word.ljust(15, "*"))

# rjust(width, fillchar)

word = "Right"
print(word.rjust(15, "."))

# zfill(width)

number = "42"
print(number.zfill(6))

# format()

name = "Alice"
age = 22
print("My name is {} and I am {} years old.".format(name, age))

print("I like {1} more than {0}.".format("tea", "coffee"))

# format_map()

person = {"name": "Alice", "age": 22}
print("My name is {name} and I am {age} years old.".format_map(person))

cart = {"item": "Apple", "price": 50, "quantity": 3}
print("You bought {quantity} {item}s for {price} each.".format_map(cart))

"""**3) search & Find Methods**

1. find ( ) : Returns the first index of a substring, or -1 if not found

2. rfind ( ) : Returns the last index of a substring

3. index ( ) : Same as find(), but throws an error if not found

4. rindex ( ) : Same as rfind(), but raises an error if not found

5. count ( ) :
"""

# find()

sentence = "Monkeys love bananas more than apples"
print(sentence.find("bananas"))   # 12
print(sentence.find("oranges"))

# rfind()

sentence = "I love pizza, pizza is life, pizza forever!"
print(sentence.rfind("pizza"))   # 24 (last occurrence)
print(sentence.rfind("burger"))  # -1 (not found)

sentence = "Run, run, run as fast as you can!"
print(sentence.rfind("run"))

# index()

sentence = "Math is hard, Science is interesting, History is long"
print(sentence.index("Science"))

word = "Banana"
print(word.index("a"))

quote = "Eat, sleep, code, repeat"
print(quote.index("code"))

sentence = "Breakfast, lunch, and dinner are important"
print(sentence.index("snack"))

# rindex() : returns the starting index of the last occurrence.

sentence = "Pizza, burgers, pizza, and pasta"
print(sentence.rindex("pizza"))

city = "Hyderabad is beautiful"
print(city.rindex("Delhi"))

# count()

fruits = "apple, banana, apple, orange, apple"
print(fruits.count("apple"))

numbers = "123123456123"
print(numbers.count("123"))

str = "abcabcababbcbcb"
print(str.count("b"))

s = "Hello World"
print(s.count("l"))

"""**4) String Testing Methods ( Boolen Results )**

1. startswith ( sub ) : Checks if a string starts with the given substring.

2. endswith ( sub ) : Checks if a string ends with the given substring.

3. isalpha ( ) : Checks if all characters are alphabets

4. isalnum ( ) : Checks if all characters are alphanumeric (letters + numbers)

5. islower ( ) : Checks if all characters are lowercase

6. isupper ( ) : Checks if all characters are uppercase

7. isspace ( ) : Checks if the string has only spaces (or whitespace characters)

8. istitle ( ) : Checks if the string is in title case (each word starts with uppercase)

9. isidentifier ( ) : Checks whether a string is a valid Python identifier
"""

# startwith(sub)

sentence = "Artificial Intelligence is amazing"
print(sentence.startswith("Artificial"))
print(sentence.startswith("Intelligence"))
print(sentence.startswith("Art"))

flights = ["AI-101", "AI-202", "BA-300", "DL-450", "AI-303"]

for flight in flights:
    if flight.startswith("AI"):
        print(flight)

roll_numbers = ["CSE101", "ECE102", "CSE103", "ME104", "CSE105"]

for roll in roll_numbers:
    if roll.startswith("CSE"):
        print(roll)

# endswith(sub)

filename = "report.pdf"
print(filename.endswith(".pdf"))
print(filename.endswith(".docx"))

files = ['notes.txt', 'data.csv', 'report.pdf', 'image.jpg', 'summary.txt', 'script.py']

for f in files:
    if f.endswith('.txt'):
        print(f)

# isalpha()

word = "Hello"
print(word.isalpha())

word2 = "Hello123"
print(word2.isalpha())

# isdigit()

num1 = "2025"
print(num1.isdigit())

num2 = "20A5"
print(num2.isdigit())

# isalnum()

data = "Python3"
print(data.isalnum())

data2 = "Python 3"
print(data2.isalnum())

# islower()

name = "python"
print(name.islower())

name2 = "Python"
print(name2.islower())

# isupper()

code = "HELLO"
print(code.isupper())

code2 = "Hello"
print(code2.isupper())

# isspace()

space = "   "
print(space.isspace())

mixed = "  Hello  "  # it should not cointaing any characters inside the string
print(mixed.isspace())

# istitle()

t1 = "Python Programming"
print(t1.istitle())

t2 = "Python programming"
print(t2.istitle())

# isidentifier()

print("var1".isidentifier())
print("_temp".isidentifier())
print("2cool".isidentifier())
print("@var".isidentifier())

"""**isdecimal()**

-> Returns True only if all characters are decimal digits (0‚Äì9).

-> No fractions, superscripts, or Roman numerals allowed.
"""

print("123".isdigit())  # Standard decimal digit
print("‚ë°".isdigit())  # Enclosed number 2 (not numeric)
print("¬≤".isdigit())  # Superscript 2
print("¬Ω".isdigit())   # Unicode fraction one-half
print('Ÿ°Ÿ¢Ÿ£'.isdigit())  # Arabic-Indic number (123)
print('€µ'.isdigit())    # Persian digit (5)
print('‚Ö´'.isdigit())  # Roman numeral 12 (Unicode)
print('‰∫î'.isdigit())  # Chinese numeral for five

"""**isdigit ( )**

-> Returns True if all characters are digits.

-> Includes decimals (0‚Äì9), superscripts, and other Unicode digits.
"""

print("123".isdigit())  # Standard decimal digit
print("‚ë°".isdigit())  # Enclosed number 2 (not numeric)
print("¬≤".isdigit())  # Superscript 2
print("¬Ω".isdigit())   # Unicode fraction one-half
print('Ÿ°Ÿ¢Ÿ£'.isdigit())  # Arabic-Indic number (123)
print('€µ'.isdigit())    # Persian digit (5)
print('‚Ö´'.isdigit())  # Roman numeral 12 (Unicode)
print('‰∫î'.isdigit())  # Chinese numeral for five

"""**isnumeric ( )**

-> Returns True if all characters are numeric.

-> Includes digits, fractions, Roman numerals, etc.
"""

print("123".isnumeric())  # Standard decimal digit
print("‚ë°".isnumeric())  # Enclosed number 2 (not numeric)
print("¬≤".isnumeric())  # Superscript 2
print("¬Ω".isnumeric())   # Unicode fraction one-half
print('Ÿ°Ÿ¢Ÿ£'.isnumeric())  # Arabic-Indic number (123)
print('€µ'.isnumeric())    # Persian digit (5)
print('‚Ö´'.isnumeric())  # Roman numeral 12 (Unicode)
print('‰∫î'.isnumeric())  # Chinese numeral for five

"""# 5) Replace & Modify Methods

1. replace ( old, new ) : Replaces occurrences of a substring with another.

2. maketrans ( ) : Creates a mapping table for character replacements.

3. translate ( table ) : Uses the mapping table (from maketrans()) to replace characters.


"""

# replace(old,new): Replaces occurrences of a substring with another,works with substrings directly.

sentence = "I like apples, apples are sweet."

print(sentence.replace("apples", "mangoes"))
print(sentence.replace("apples", "mangoes", 1))

s='Django'
print(s.replace('j','-J'))

s='python programming language'
print(s.replace(' ',''))

# maketrans(): Creates a mapping table for character replacements.

mapping = str.maketrans("aeiou", "12345")

text = "education"
print(text.translate(mapping))

table = str.maketrans("abc", "123")
print("abc cab".translate(table))

# translate(table): applies that table to modify text (replace/remove multiple chars at once).

data = "hello world"

table = str.maketrans({"h": "H", "w": "W", "o": None})

print(data.translate(table))

nums = "12345"
table = str.maketrans({"1": "one", "2": "two", "3": "three", "4": "four", "5": "five"})
print(nums.translate(table))

"""# 6. Splitting & Joining Methods

1. split(sep) : Splits the string from the left using the given separator.

2. rsplit(sep) : Splits the string from the right side using the given separator.

3. splitlines() : Splits a string at line breaks (\n,\r,\r\n).

4. join(iterable) : Joins elements of an iterable into a single string.

5. partition(sep) : Splits into 3 parts: (before separator, separator, after separator).

6. rpartition(sep) : Similar to partition(), but starts splitting from the right.
"""

# split(sep)

text = "apple,banana,cherry,grapes"
print(text.split(","))

line = "one two three four five"
print(line.split(" ", 2))

# rsplit(sep)

data = "name-age-location"
print(data.rsplit("-", 1))

words = "a-b-c-d"
print(words.rsplit("-", 2))

# splitlines()

para = "Hello\nHow are you?\nI am fine."
print(para.splitlines())

para2 = "Line1\rLine2\r\nLine3"
print(para2.splitlines())

# join(iterable)

words = ['Python', 'is', 'fun']
print(" ".join(words))

fruits = ['apple', 'banana', 'cherry']
print("".join(fruits))
print(" ".join(fruits))
print(" @ ".join(fruits))
print(" , ".join(fruits))
print(" + ".join(fruits))

# partition(sep)

text = "Hello-World"
print(text.partition("-"))

text2 = "python is awesome"
print(text2.partition("is"))

# rpartition(sep)

text = "one-two-three"
print(text.rpartition("-"))

line = "a b c d e"
print(line.rpartition(" "))

"""## 7. Whitespaces & Trimming Methods

1. strip(chars) : Removes leading (left) and trailing (right) whitespaces or given characters.

2. lstrip(chars) : Removes characters/whitespaces only from the left side.

3. rstrip(chars) : Removes characters/whitespaces only from the right side.
"""

# strip(chars)

text = "   hello world   "
print(text.strip())

word = "###Python###"
print(word.strip("#"))

# lstrip()

text = "   hello world   "
print(text.lstrip())

word = "---Python---"
print(word.lstrip("-"))

# rstrip()

text = "   hello world   "
print(text.rstrip())

word = "---Python---"
print(word.rstrip("-"))

"""# 8. Encoding & Decoding Methods

1. encode(encoding) : Converts a string into a bytes object (encoded form).

2. decode(encoding) : Converts bytes back to a string (decoded form).

"""

# encode()

text = "Hello World"

encoded_text = text.encode()
print(encoded_text)

hindi_text = "‡§®‡§Æ‡§∏‡•ç‡§§‡•á"
print(hindi_text.encode())

text1 = "Hello ‡§®‡§Æ‡§§‡•á‰Ω†Â•Ω caf√© üôÇ"
print(text1.encode())

# decode()

encoded_text = b'Hello World'
decoded_text = encoded_text.decode()
print(decoded_text)

encoded_hindi = b'\xe0\xa4\xa8\xe0\xa4\xae\xe0\xa4\xb8\xe0\xa5\x8d\xe0\xa4\xa4\xe0\xa5\x87'
print(encoded_hindi.decode())

encoded_text1 = b'Hello \xe0\xa4\xa8\xe0\xa4\xae\xe0\xa4\xa4\xe0\xa5\x87\xe4\xbd\xa0\xe5\xa5\xbd caf\xc3\xa9 \xf0\x9f\x99\x82'
print(encoded_text1.decode())
